name: CI

on:
  workflow_dispatch: # Allow manual runs.
  pull_request:
    branches: [ 'main' ]
  push:
    branches: [ 'main' ]

jobs:
  set-matrix:
    name: Set CI target to matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3
      - uses: bazelbuild/setup-bazelisk@v2
      - run: sudo apt update && sudo apt install -y jq
      - id: set-matrix
        run: echo matrix=$(bazel query 'attr("tags", "'amd64'", "//...")' | tr ':' '/' | awk -F '/' '{print $3}' | uniq | jq -Rc . | jq -cs .) >> $GITHUB_OUTPUT

  ci:
    needs: set-matrix
    strategy:
      matrix:
        target: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    name: CI tests for ${{ matrix.target }}
    runs-on: ubuntu-20.04 # most compatible with debian 11

    steps:
    - uses: actions/checkout@v3
    - uses: bazelbuild/setup-bazelisk@v2
    - name: Build and test
      run: |
        set -ex
        for i in $(seq 5); do bazel fetch --loading_phase_threads=1 //${{ matrix.target }}/... && break || sleep 20; done
        targets=$(bazel query 'attr("tags", "'amd64'", "//${{ matrix.target }}/...")')
        bazel build --curses=no ${targets}
        bazel test --curses=no --test_output=errors ${targets}

  ci-unit:
    name: CI unit tests
    runs-on: ubuntu-20.04 # most compatible with debian 11

    steps:
    - uses: actions/checkout@v3
    - uses: bazelbuild/setup-bazelisk@v2
    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    - name: Build and test
      run: |
        set -ex
        for i in $(seq 5); do bazel fetch --loading_phase_threads=1 //... && break || sleep 20; done
        bazel build --curses=no //...
        bazel test --curses=no --test_output=errors //...

  # since the matrix of ci jobs is dynamically generated, we actually make "ci-results" the required job here
  ci-results: 
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: All CI tests pass
    needs: [ci]
    steps:
      - run: |
          set -e
          test "${{ needs.ci.result }}" = "success"      
