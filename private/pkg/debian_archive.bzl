BUILD_TMPL = """\
# GENERATED BY debian_archive.bzl
load("@distroless//private/pkg:dpkg_status.bzl", "dpkg_status")
load("@distroless//private/pkg:debian_spdx.bzl", "debian_spdx")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

filegroup(
	name = "control",
	srcs = ["control.tar.xz"],
	visibility = ["//visibility:public"]
)
filegroup(
	name = "data",
	srcs = ["data.tar.xz"],
	visibility = ["//visibility:public"]
)

debian_spdx(
    name = "spdx",
    control = "control.tar.xz",
    data = "data.tar.xz",
    package_name = "{package_name}",
    spdx_id = "{spdx_id}",
    sha256 = "{sha256}",
    urls = [{urls}]
)

dpkg_status(
    name = "data_with_dpkg_status",
    control = "control.tar.xz",
    data = "data.tar.xz",
    package_name = "{package_name}"
)


filegroup(
    name = "{name}",
    srcs = [":data_with_dpkg_status", ":spdx"],
    visibility = ["//visibility:public"],
)
"""

def _impl(rctx):
    rctx.report_progress("Fetching {}".format(rctx.attr.package_name))
    rctx.download_and_extract(
        url = rctx.attr.urls,
        sha256 = rctx.attr.sha256,
        type = "deb"
    )
    rctx.file(
        "BUILD.bazel", 
        content = BUILD_TMPL.format(
            name = rctx.attr.name,
            package_name = rctx.attr.package_name,
            spdx_id = rctx.attr.name,
            urls = ",".join(['"%s"' % url for url in rctx.attr.urls]),
            sha256 = rctx.attr.sha256,
        )
    )


debian_archive = repository_rule(
    implementation = _impl,
    attrs = {
        "package_name": attr.string(mandatory = True),
        "urls": attr.string_list(mandatory=True),
        "sha256": attr.string(mandatory=True),
    }
)