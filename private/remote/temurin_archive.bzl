BUILD_TMPL = """\
# GENERATED BY temurin_archive.bzl
load("@distroless//private/pkg:debian_spdx.bzl", "debian_spdx")
load("@distroless//private/util:merge_providers.bzl", "merge_providers")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("@rules_pkg//pkg:mappings.bzl", "pkg_filegroup", "pkg_files", "pkg_attributes", "pkg_mklink_impl")

# all files except bin and cacerts
pkg_files(
    name = "_most_files",
    srcs = glob(
        ["output/**/*"],
    ),
    excludes = ["_executables", "_cacerts"],
    strip_prefix = "output",
)

# special rules for bin files to make them executable and other executables
pkg_files(
    name = "_executables",
    srcs = glob(["output/bin/*"]) + ["output/lib/jexec", "output/lib/jspawnhelper"],
    attributes = pkg_attributes(
        mode = "0755",
        user = "root",
        group = "root",
    ),
    strip_prefix = "output",
)

# everything that needs to go into the jvm install dir
pkg_filegroup(
    name = "_jvm_dir",
    srcs = ["_executables", "_most_files"],
    prefix = "/usr/lib/jvm/{name}",
)

# cacerts rules
pkg_files(
    name = "_cacerts",
    srcs = glob(
        ["output/lib/security/cacerts"],
    ),
    renames = {{
        "output/lib/security/cacerts": "/etc/ssl/certs/java/cacerts",
    }},
)

pkg_mklink_impl(
    name = "_cacerts_link",
    link_name = "/usr/lib/jvm/{name}/lib/security/cacerts",
    target = "/etc/ssl/certs/java/cacerts",
)

pkg_tar(
    name = "data",
    srcs = ["_jvm_dir", "_cacerts", "_cacerts_link"],
)

pkg_tar(
    name = "_control",
    srcs = ["control"],
)

debian_spdx(
    name = "spdx",
    control = ":_control.tar",
    data = ":data.tar",
    package_name = "{package_name}",
    spdx_id = "{spdx_id}",
    sha256 = "{sha256}",
    urls = [{urls}]
)

merge_providers(
    name = "{name}",
    srcs = [":data", ":spdx"],
    visibility = ["//visibility:public"],
)
"""

def _impl(rctx):
    rctx.report_progress("Fetching {}".format(rctx.attr.package_name))
    rctx.download_and_extract(
        url = rctx.attr.urls,
        sha256 = rctx.attr.sha256,
        type = rctx.attr.type,
        stripPrefix = rctx.attr.strip_prefix,
        output = "output",
    )
    rctx.template(
        "control",
        rctx.attr.control,
        substitutions = {
            "{{VERSION}}": rctx.attr.version,
            "{{ARCHITECTURE}}": rctx.attr.architecture,
            "{{SHA256}}": rctx.attr.sha256,
        },
    )
    rctx.file(
        "BUILD.bazel",
        content = BUILD_TMPL.format(
            name = rctx.attr.name,
            package_name = rctx.attr.package_name,
            version = rctx.attr.version,
            spdx_id = rctx.attr.name,
            urls = ",".join(['"%s"' % url for url in rctx.attr.urls]),
            sha256 = rctx.attr.sha256,
        ),
    )

temurin_archive = repository_rule(
    implementation = _impl,
    attrs = {
        "urls": attr.string_list(mandatory = True),
        "sha256": attr.string(mandatory = True),
        "type": attr.string(default = ".tar.gz"),
        "strip_prefix": attr.string(),
        "package_name": attr.string(default = "temurin"),
        "version": attr.string(mandatory = True),
        "architecture": attr.string(mandatory = True),
        # control is only used to populate the sbom, see https://github.com/GoogleContainerTools/distroless/issues/1373
        # for why writing debian control files to the image is incompatible with scanners.
        "control": attr.label(),
    },
)
